<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnLimpiarForm.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAASUVORK5CYII=
</value>
  </data>
</root>